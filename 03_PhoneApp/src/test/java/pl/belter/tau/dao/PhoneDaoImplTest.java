package pl.belter.tau.dao;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import pl.belter.tau.domain.Phone;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import static org.hamcrest.core.IsEqual.equalTo;

@RunWith(JUnit4.class)
public class PhoneDaoImplTest {
    public static String url = "jdbc:hsqldb:hsql://localhost/workdb";

    Dao phoneManager;
    List<Phone> expectedDbState;

    @Before
    public void setup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.createStatement()
                    .executeUpdate("CREATE TABLE " +
                            "Phone(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                            "model varchar(20) NOT NULL, " +
                            "serialnumber integer)");

        } catch (SQLException e) {
        }

        Random rand = new Random();
        PreparedStatement addMovieStmt = connection.prepareStatement(
                "INSERT INTO Phone (model, serialnumber) VALUES (?, ?)",
                Statement.RETURN_GENERATED_KEYS);

        expectedDbState = new LinkedList<Phone>();
        for (int i = 0; i < 10; i++) {
            Phone phone = new Phone("Nokia" + rand.nextInt(1000), 1000 + rand.nextInt(1000));
            try {
                addMovieStmt.setString(1, phone.getModel());
                addMovieStmt.setInt(2, phone.getSerialNumber());
                addMovieStmt.executeUpdate();
                ResultSet generatedKeys = addMovieStmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    phone.setId(generatedKeys.getLong(1));
                }
            } catch (SQLException e) {
                throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
            }

            expectedDbState.add(phone);
        }
        phoneManager = new PhoneDaoImpl(connection);
    }

    @After
    public void cleanup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.prepareStatement("DELETE FROM Phone").executeUpdate();
        } catch (Exception e) {
            System.out.println("Probably the database was not yet initialized");
        }
    }


    @Test
    public void checkAdding() throws Exception {
        Phone phone = new Phone();
        phone.setModel("B");
        phone.setSerialNumber(100);
        Assert.assertEquals(1, phoneManager.addPhone(phone));


    }

    @Test
    public void checkGettingAll() {
        Assert.assertThat(phoneManager.getAllPhones(), equalTo(expectedDbState));
    }

    @Test
    public void checkGettingById() throws Exception {
        Phone phone = expectedDbState.get(5);
        Assert.assertEquals(phone, phoneManager.getPhone(phone.getId()));
    }

    @Test(expected = Exception.class)
    public void checkGettingByIdException() throws Exception {
        Phone phone = expectedDbState.get(12);
        Assert.assertEquals(phone, phoneManager.getPhone(phone.getId()));

    }

    @Test()
    public void checkUpdatingSuccess() throws SQLException {
        Phone p = expectedDbState.get(3);
        p.setModel("Motrorolla");
        expectedDbState.set(3, p);
        Assert.assertEquals(1, phoneManager.updatePhone(p));
        Assert.assertThat(phoneManager.getAllPhones(), equalTo(expectedDbState));
    }

    @Test(expected = SQLException.class)
    public void checkUpdatingFailure() throws SQLException {
        Phone p = new Phone("Motrorolla", 123);
        Assert.assertEquals(1, phoneManager.updatePhone(p));
    }


}
